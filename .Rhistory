mean(x)
8.58-mean(x)
8.58-mean(x)/sd(x)
install.packages("swirl")
library(swirl)
swirl()
plot(child~parent,galton)
plot(jitter(child,4)~parent, galton)
regrline<- lm(child~parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages('AppliedPredictiveModelling')
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?hist()
hist(training$SuperPlasticizer)
hist(as.numeric(training$SuperPlasticizer)
)
head(training)
nrow(training)
training$Superplasticizer
log(training$Superplasticizer)
hist(log(training$SuperPlasticizer))
hist(as.numeric(log(training$SuperPlasticizer)))
library(sqldf)
sqldf("Select SuperPlasticize from training where training != '0'")
sqldf("Select SuperPlasticizer from training where training != '0'")
sqldf("Select SuperPlasticizer from training where SuperPlasticizer != '0'")
hist(log(sqldf("Select SuperPlasticizer from training where SuperPlasticizer != '0'")))
hist(as.numeric(log(sqldf("Select SuperPlasticizer from training where SuperPlasticizer != '0'"))))
filteredValues<-sqldf("Select SuperPlasticizer from training where SuperPlasticizer != '0'")
hist(as.numeric(log(filteredValues))
)
hist(as.double(log(filteredValues))
)
x<-as.matrix(filteredData)
x<-as.matrix(filteredValues)
hist(as.numeric(log(x)))
eval=false
?eval=false
?eval
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
sd1<-sd(x)
sd1
t.test(x,y)
library(UsingR)
data(diamond)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(lm(price ~ carat, data = diamond), lwd = 2)
predict(fit, newdata = data.frame(carat = newx))
fit <-lm(price ~carat, data=diamond)
predict(fit, newdata = data.frame(carat = newx))
newx <-c(0.16, 0.27, 0.34)
predict(fit, newdata = data.frame(carat = newx))
fit
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
plot(x,y)
abline(lm(y~x), lwd=2)
fit<- lm(y~x)
resid(fit)
sd(resid(fit))
resid(fit)
rsd(fit)
sqrt(deviance(fit)/df.residual(fit))
mtcars
fit<-lm(weight ~ mpg )
fit<-lm(wt ~ mpg )
fit<-lm(mtcars$wt ~ mtcars$mpg )
t.test(mtcars$wt ~ mtcars$mpg)
t.test(mtcars$wt,mtcars$mpg)
t.test(mean(mtcars$wt),mtcars$mpg)
summary(fit)
coef(fit)[1]
coef(fit)[2]
summary(fit)$coefficients
summary(fit)$r
summary(fit)$r.squared
sum(summary(fit)$residuals^2)
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
plot(mtcars$wt,mtcars$mpg )
abline(lm(weight ~ mpg ), data =mtcars)
abline(lm(weight ~ mpg , data =mtcars), lwd=2)
abline(lm(wt ~ mpg , data =mtcars), lwd=2)
plot(abline(lm(wt ~ mpg , data =mtcars), lwd=2))
abline(lm(wt ~ mpg , data =mtcars), lwd=2)
plot(mtcars$wt,mtcars$mpg )
abline(lm(wt ~ mpg , data =mtcars), lwd=2)
head(mtcars$wt)
head(wt)
mtcars$wt
mtcars
sumCoef <- summary(fit)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2])[1] - (sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2])[2]
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2])[1] + (sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2])[2]
confint(fit)
confint(fit,"wt")
fit1<-lm(mtcars$mpg ~ mtcars$wt )
confint(fit1)
confint(fit1, level=0.95)
confint(fit1)
confint(fit)
confint(fit, level=0.95)
confint(fit1,"mpg")
confint(fit1,"wt")
confint(fit1,mtcars$wt)
x<- mtcars$wt
y<- mtcars$mpg
plot(x, y,frame=FALSE,xlab="Carat",ylab="Dollars",pch=21,col="black", bg="lightblue", cex=2)
abline(fit, lwd = 2)
xVals <- seq(min(x), max(x), by = .01)
yVals <- beta0 + beta1 * xVals
se1 <- sigma * sqrt(1 / n + (xVals - mean(x))^2/ssx)
se2 <- sigma * sqrt(1 + 1 / n + (xVals - mean(x))^2/ssx)
lines(xVals, yVals + 2 * se1)
lines(xVals, yVals - 2 * se1)
lines(xVals, yVals + 2 * se2)
lines(xVals, yVals - 2 * se2)
n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
plot(x, y,frame=FALSE,xlab="Carat",ylab="Dollars",pch=21,col="black", bg="lightblue", cex=2)
abline(fit, lwd = 2)
xVals <- seq(min(x), max(x), by = 3)
yVals <- beta0 + beta1 * xVals
se1 <- sigma * sqrt(1 / n + (xVals - mean(x))^2/ssx)
se2 <- sigma * sqrt(1 + 1 / n + (xVals - mean(x))^2/ssx)
lines(xVals, yVals + 2 * se1)
lines(xVals, yVals - 2 * se1)
lines(xVals, yVals + 2 * se2)
lines(xVals, yVals - 2 * se2)
x
y
fit <- lm(y ~ x);
xVals
seq(min(x), max(x), by = 3)
beta0
beta1
beta0 + beta1 * xVals
lm(xVals~ yVals)
lm(yVals ~ xVals)
fit<-lm(yVals ~ xVals)
cofint(fit)
confint(fit)
summary(fit)
fit<- lm(y ~ x)
fit
newData <- data.frame(x=3)
predict(fit, newData, interval="confidence")
y
mtcars
newData <- data.frame(x=2)
predict(fit, newData, interval="confidence")
newData <- data.frame(x=2, y=1)
predict(fit, newData, interval="confidence")
newData <- data.frame(y=1)
predict(fit, newData, interval="confidence")
fit<- lm(x ~ y)
fit
newData <- data.frame(x=1)
predict(fit, newData, interval="confidence")
newData <- data.frame(y=2)
predict(fit, newData, interval="confidence")
fit
plot(fit, lwd=2)
plot(x,y, lwd=2)
summary(fit)
cofint(fit)
confint(fit)
fit<- lm(y ~ x)
plot(x,y, lwd=2)
confint(fit)
fit<- lm(x ~ y)
confint(fit)
newData <- data.frame(x=1)
predict(fit, newData, interval="confidence")
newData <- data.frame(x=1, y=2)
predict(fit, newData, interval="confidence")
ssx <- sum((x - mean(x))^2)
sd(x)^2
sd(x)^2/ ssx
n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ncol(training)
training
head(training)
preProc<- preProcess(log10(training)+1), method="pca",pcaComp=2)
preProc<- preProcess(log10(training+1)), method="pca",pcaComp=2)
preProc<- preProcess(log10(training)), method="pca",pcaComp=2)
preProc<- preProcess(log10(training+1), method="pca",pcaComp=2)
head(training)
head(training[,1])
head(training[,58])
training[,58]
preProc<- preProcess(log10(training[,58]+1), method="pca",pcaComp=2)
preProc<- preProcess(training[,58], method="pca",pcaComp=2)
length(training[,58])
abs(cor(training[,58]))
library(kernlab)
data(spam)
spam
head(spam)
head(spam[,58])
spam[,58]
spam
ncol(spam)
ncol(training)
ncol(training[,131])
training[,131]
preProc<- preProcess(log10(training[,131]+1), method="pca",pcaComp=2)
preProc<- preProcess(training[,131], method="pca",pcaComp=2)
preProc<- preProcess(data.frame(training[,131]), method="pca",pcaComp=2)
preProc<- preProcess(data.frame(log10(training[,131]+1), method="pca",pcaComp=2)
)
preProc<- preProcess(data.frame(log10(training[,131]+1)), method="pca",pcaComp=2)
preProc<- preProcess(data.frame(training[,131]+1), method="pca",pcaComp=2)
library(sqldf)
sqldf("alter table training add value number")
training
ncol(training)
sqldf("select distinct genotype from training")
sqldf("Select case Genotype when 'E2E2' then 1 when 'E2E3' then 2 when 'E2E4' then 3 when 'E3E3' then 4 when 'E3E4' then 5 when 'E3E4' then 6 when 'E4E4' then 7 end from training")
sqldf("Select (case Genotype when 'E2E2' then 1 when 'E2E3' then 2 when 'E2E4' then 3 when 'E3E3' then 4 when 'E3E4' then 5 when 'E3E4' then 6 when 'E4E4' then 7 end) as Genetype from training")
Analysis<-sqldf("Select (case Genotype when 'E2E2' then 1 when 'E2E3' then 2 when 'E2E4' then 3 when 'E3E3' then 4 when 'E3E4' then 5 when 'E3E4' then 6 when 'E4E4' then 7 end) as Genetype from training")
preProc<- preProcess(data.frame(log10(Analysis+1)), method="pca",pcaComp=2)
preProc<- preProcess(data.frame(log10(Analysis)), method="pca",pcaComp=2)
preProc<- preProcess(data.frame(Analysis), method="pca",pcaComp=2)
preProc<- preProcess(data.frame(Analysis), method="pca")
head(training)
?preprocess()
?preProcess()
colNames(training)
colnames(training)
sqldf("Select IL_13, IL_17E, IL_3, IL_5,IL_6_Receptor, IL_8, IL_11, IL_16,IL_1alpha,IL_4, IL_6,IL_7 from training ")
Analysis<-sqldf("Select IL_13, IL_17E, IL_3, IL_5,IL_6_Receptor, IL_8, IL_11, IL_16,IL_1alpha,IL_4, IL_6,IL_7 from training ")
Analysis
preProc<- preProcess(log10(Analysis+1), method="pca",pcaComp=2)
preProc<- preProcess(Analysis, method="pca")
trainPC<- predict(preProc,Analysis )
modelFit<- train(training$Genotype ~ .,method="glm", data=trainPC )
modelFit<- train(training$Genotype,method="glm", data=trainPC )
?train
modelFit<- train(training,method="glm", data=trainPC )
modelFit<- train(training$Genotype ~ .,training$Genotype,method="glm", data=trainPC )
modelFit<- train(training$Genotype ~ .,Analysis,method="glm", data=trainPC )
modelFit<- train(training$Genotype ~ .,method="glm", data=trainPC )
ncol(Analysis)
summary(fit)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit<- lm(y~x)
summary(fit)
x<- mtcars$wt
y<-mtcars$mpg
fit<- lm(y~x)
summary(fit)
?confint
confint(fit)
fit<- lm(y~mean(x))
fit<- lm(y ~ x)
newData <- data.frame(x=3)
predict(fit, newData, interval="confidence")
fit<- lm(y ~ x)
newData <- data.frame(x=4)
predict(fit, newData, interval="confidence")
fit<- lm(x ~ y)
newData <- data.frame(y=3)
predict(fit, newData, interval="confidence")
fit<- lm(y ~ x)
newData <- data.frame(x=3,y=1)
predict(fit, newData, interval="confidence")
fit<- lm(x ~ y)
newData <- data.frame(x=1,y=3)
predict(fit, newData, interval="confidence")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
training$Superplasticizer
log(training$Superplasticizer+1)
hist(log(training$Superplasticizer+1))
summary(lm(mpg ~ am + cyl, mtcars))
plot(mtcars, gap=0)
summary(lm(mpg ~ am + cyl+disp, mtcars))
summary(lm(mpg ~ . + cyl+disp, mtcars))
summary(lm(mpg ~ am + cyl+disp, mtcars))
summary(lm(mpg ~ am + cyl, mtcars))
summary(step(lm(data=mtcars,mpg~cyl+wt+hp+disp+drat+qsec+factor(vs)+factor(am)+gear+carb),direction="backward",test="F"))
summary(lm(data=mtcars,mpg~cyl+wt+hp+disp+drat+qsec+factor(vs)+factor(am)+gear+carb))
getwd
getwd()
setwd("C:\\Users\\GauravGeet\\coursera\\RegressionModel")
data . frame ( mtcars , fitted . value = fitted (
mtcars .lm) , residual = resid ( mtcars .lm) )
mtcars.lm<- summary(lm(data=mtcars,mpg~cyl+wt+hp+disp+drat+qsec+factor(vs)+factor(am)+gear+carb))
data . frame ( mtcars , fitted . value = fitted (
mtcars.lm) , residual = resid ( mtcars.lm) )
data.frame (mtcars, fitted.value = fitted(mtcars.lm), residual = resid (mtcars.lm))
fitted(mtcars.lm)
?fitted
fitted.values(mtcars.lm)
fitted(summary(lm(mpg ~ am + cyl, mtcars)))
mtcars.lm<- lm(data=mtcars,mpg~cyl+wt+hp+disp+drat+qsec+factor(vs)+factor(am)+gear+carb)
fitted.values(mtcars.lm)
summary(lm(mpg ~ am + cyl+disp+qsec, mtcars))
summary(lm(mpg ~ factor(am) + cyl+disp+qsec, mtcars))
summary(lm(mpg ~ factor(am) + cyl+qsec, mtcars))
model<- lm(mpg~.,data=mtcars)
summary(model)
round(cor(mtcars),3)
plot(disp,mpg)
plot(mtcars$disp,mtcars$mpg)
model<- lm(mpg~.,data=mtcars)
summary(model)
model<- lm(mpg~disp+hp+drat+wt+qsec+vs+am+gear+carb,data=mtcars)
summary(model)
model_a<- lm(mpg~.,data=mtcars)
model_b<- lm(mpg~disp+hp+drat+wt+qsec+vs+am+gear+carb,data=mtcars)
summary(model_a)
summary(model_b)
model_b<- lm(mpg~cyl+disp+hp+drat+wt+qsec+am+gear+carb,data=mtcars)
model_c<- lm(mpg~cyl+disp+hp+drat+wt+qsec+am+gear+carb,data=mtcars)
model_b<- lm(mpg~disp+hp+drat+wt+qsec+vs+am+gear+carb,data=mtcars)
summary(model_c)
model_c<- update(model_c,~,-cyl)
model_c<- update(model_c.~,-cyl)
?update
model_c<- update(model_c,.~.-cyl)
summary(model_c)
model_c<- update(model_c,.~.-carb)
summary(model_c)
model_c<- update(model_c,.~.-gear)
summary(model_c)
model_c<- update(model_c,.~.-drat)
summary(model_c)
model_c<- update(model_c,.~.-disp)
summary(model_c)
model_c<- update(model_c,.~.-hp)
summary(model_c)
summary(model_c)
data.frame(mtcars , fitted.value = fitted (model_c) , residual = resid(model_c))
?fitted
FinalDF<-data.frame(mtcars , fitted.value = fitted (model_c) , residual = resid(model_c))
plot(mtcars$mpg, mtcars$fitted.value)
plot(mtcars$fitted.value, mtcars$residual)
anova(model_c)
predict(model_c, interval="confidence")
predConfi<-predict(model_c, interval="confidence")
predConfi<-predict(model_c, interval="prediction")
predConfi<-predict(model_c, interval="confidence")
predict(model_c, interval="prediction")
plot(fitted (model_c))
predict(model_c)
?predict
model_c
plot(resid(model_c), wt)
plot(resid(model_c), wt, data=modelc)
plot(resid(model_c), wt, data=model_c)
plot(resid(model_c)~wt)
plot(resid(model_c)~wt, ylab="Residuals")
plot(resid(model_c)~qsec, ylab="Residuals")
par(mfrow=c(1,2))
plot(resid(model_c)~qsec, ylab="Residuals")
resid(model_c)
resid(model_c$wt)
fittedDF
FinalDF
plot(residual, wt, data=finalDF)
plot(residual, wt, data=FinalDF)
?plot
plot(y=FinalDF$residual, x=FinalDF$wt)
abline()
?abline
?lm
par ( mfrow =c(1 ,4) )
plot (model_c , which =1:4)
par ( mfrow =c(1 ,1) )
?mfrow
mfrow
plot (model_c , which =1:4)
par ( mfrow =c(1 ,4) )
plot (model_c , which =1:4)
plot (model_c , which =1)
plot (model_c )
plot (model_c , which =1:1)
mfrow
plot (model_c , which =1:1)
dev.off
dev.off()
plot (model_c , which =1:1)
plot (model_c , which =4)
plot (model_c , which =5)
plot (model_c , which =6)
plot (model_c , which =7)
plot(x=factor(am), y = mpg, data=mtcars)
plot(x=factor(mtcars$am), y = mtcars$mpg, par=19, col="blue")
plot(x=factor(mtcars$am), y = mtcars$mpg, par=19, col="blue", xlab="Transmission", ylab="MPG")
library(knitr)
knittohtml()
knit2html
knit2html()
knit2html("Model.RMD")
knit2html("Model.RMD")
knit2html("Model.RMD")
knit2html("Model.RMD")
render("input.Rmd", "model.pdf")
install.packages('rmarkdown')
library('rmarkdown')
render("input.Rmd", "model.pdf")
render("Model.Rmd", "Model.pdf")
render("Model.Rmd", "Model")
?render
render("Model.Rmd", "pdf_document")
render("Model.Rmd", "pdf_document")
render("Model.Rmd", "all")
getwd()
render("Model.Rmd")
render("Model.Rmd","pdf_document")
install.packages('pdflatex')
render("Model.Rmd","pdf_document")
library('pdflatex')
install.packages('texlive-latex-recommended')
render("Model.Rmd","pdf_document")
